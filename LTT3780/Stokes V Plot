import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.legend_handler import HandlerLine2D, HandlerTuple
from matplotlib import rc

# RR file
file_name_RR = 'PlotMSExports/Realcorrected_vs_time_RR'
x,y = np.loadtxt(file_name_RR,unpack=True,usecols=(0,1))
RR = y


# LL file
file_name_LL = 'PlotMSExports/Realcorrected_vs_time_LL'
x,y = np.loadtxt(file_name_LL,unpack=True,usecols=(0,1))
LL = y

comparison = RR != LL
equal_arrays = comparison.all()
print(equal_arrays)

# Stokes V Plot
V = (RR - LL) / 2
V_uJy = V*(10**6)



sigma = np.std(V_uJy)
#print 'Standard deviation: ' + str(sigma) + 'Jy' + ' or ' + str(sigma*(10e5)) + 'uJy'
#print 'Three times sigma: ' + str(3*sigma) + 'Jy' + ' or ' + str((3*sigma)*(10e5)) + 'uJy'

time = (x - 5085265944)
font = 14

fig= plt.figure(figsize=(10,6), dpi=300)

#print np.where(time == 197844.75)

plt.xticks(fontsize=font)
plt.yticks(fontsize=font)
#plt.ticklabel_format(axis='y',style='sci',scilimits=(-3,3))
Zero = plt.plot(time, 0*np.ones(len(time)),'-k', linewidth=1.0)

error_array_correct_version_upper=(3*sigma)*np.ones(len(time))
error_array_correct_version_lower=(-3*sigma)*np.ones(len(time))

error_upper = plt.plot(time,error_array_correct_version_upper,'-r',label='3-sigma threshold',linewidth=1.0)
error_lower = plt.plot(time,error_array_correct_version_lower,'-r')

StokesVIntensity = plt.plot(time,V_uJy,'-b',label='Stokes V',linewidth=1.0)
plt.title('Radio Intensity for LTT3780 in Stokes V', fontsize = 14)
plt.xlabel('Time (sec)', fontsize = font)
plt.ylabel('Intensity (uJy)', fontsize = font)
plt.xlim(0,201648.750)
plt.ylim(-100,100)
plt.legend(loc='lower left', fontsize=10)

#print plt.ylim()
#y_min = float(raw_input('What is the lower y-limit?'))
#y_max = float(raw_input('What is the upper y-limit?'))

#query = raw_input('Plot an error line? ')

#error_array = []
#error_array = list()

#if(query == 'yes'):
  #sigma = 3*(float(raw_input('Enter the sigma error value:')))
  #while len(str(sigma)) < len(time):
    #error_array.append(str(sigma))
    #if len(error_array) == len(time):
     #break
  #plt.plot(time,error_array,label='Error Line')
  #plt.legend()
  #plt.show()
  #print 'Plot completed'
#else:
plt.show()
plt.savefig('ltt3780timeseriesStokesV.pdf')
#print 'Plot completed'
